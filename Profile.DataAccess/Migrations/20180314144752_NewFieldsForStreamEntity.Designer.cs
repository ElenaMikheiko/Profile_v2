// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Profile.DataAccess.Data;
using System;

namespace Profile.DataAccess.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    [Migration("20180314144752_NewFieldsForStreamEntity")]
    partial class NewFieldsForStreamEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Profile.Model.Models.AdditionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ResumeId");

                    b.Property<string>("Text")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("AdditionalInfo");
                });

            modelBuilder.Entity("Profile.Model.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Profile.Model.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Link")
                        .HasMaxLength(100);

                    b.Property<string>("Organization");

                    b.Property<int>("ResumeId");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("YearOfAttestation");

                    b.HasKey("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Profile.Model.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Organization")
                        .HasMaxLength(100);

                    b.Property<int>("ResumeId");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100);

                    b.Property<string>("YearOfGraduation")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Profile.Model.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Department")
                        .HasMaxLength(100);

                    b.Property<int>("EducationLevelId");

                    b.Property<string>("EducationalInstitution")
                        .HasMaxLength(100);

                    b.Property<int>("ResumeId");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100);

                    b.Property<string>("YearOfAdmission");

                    b.Property<string>("YearOfGraduation");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("ResumeId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("Profile.Model.Models.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Degree")
                        .HasMaxLength(100);

                    b.Property<string>("Level")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("Profile.Model.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExamName")
                        .HasMaxLength(100);

                    b.Property<string>("Organization")
                        .HasMaxLength(100);

                    b.Property<int>("ResumeId");

                    b.Property<string>("Specialization");

                    b.Property<string>("YearOfAttestation");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Profile.Model.Models.ForeignLanguage", b =>
                {
                    b.Property<int>("ResumeId");

                    b.Property<int>("LanguageId");

                    b.Property<int>("LanguageLevelId");

                    b.HasKey("ResumeId", "LanguageId", "LanguageLevelId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("ForeignLanguages");
                });

            modelBuilder.Entity("Profile.Model.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Profile.Model.Models.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LevelName");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");
                });

            modelBuilder.Entity("Profile.Model.Models.MilitaryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ResumeId");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("MilitaryStatus");
                });

            modelBuilder.Entity("Profile.Model.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Link")
                        .HasMaxLength(100);

                    b.Property<int>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Portfolio");
                });

            modelBuilder.Entity("Profile.Model.Models.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactAndLetterLink")
                        .HasMaxLength(1000);

                    b.Property<string>("PersonName")
                        .HasMaxLength(100);

                    b.Property<string>("PersonPositionAndOrganization")
                        .HasMaxLength(100);

                    b.Property<int>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("Profile.Model.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Resume");
                });

            modelBuilder.Entity("Profile.Model.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Profile.Model.Models.Stream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StreamFullName")
                        .HasMaxLength(100);

                    b.Property<string>("StreamShortName");

                    b.HasKey("Id");

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("Profile.Model.Models.StreamSkill", b =>
                {
                    b.Property<int>("StreamId");

                    b.Property<int>("SkillId");

                    b.HasKey("StreamId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("StreamSkills");
                });

            modelBuilder.Entity("Profile.Model.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfGraduation");

                    b.Property<string>("TrainerId");

                    b.Property<int>("UserInfoId");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Profile.Model.Models.StudentSkill", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("SkillId");

                    b.HasKey("StudentId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("StudentSkills");
                });

            modelBuilder.Entity("Profile.Model.Models.StudentStream", b =>
                {
                    b.Property<int>("StreamId");

                    b.Property<int>("StudentId");

                    b.HasKey("StreamId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentStreams");
                });

            modelBuilder.Entity("Profile.Model.Models.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ResumeId");

                    b.Property<string>("Text")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("Summary");
                });

            modelBuilder.Entity("Profile.Model.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(30);

                    b.Property<string>("EnName")
                        .HasMaxLength(30);

                    b.Property<string>("EnSurname")
                        .HasMaxLength(50);

                    b.Property<string>("GoogleApiKey");

                    b.Property<string>("Linkedin")
                        .HasMaxLength(150);

                    b.Property<string>("Phone");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("RuName")
                        .HasMaxLength(30);

                    b.Property<string>("RuSurname")
                        .HasMaxLength(50);

                    b.Property<string>("Skype")
                        .HasMaxLength(30);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Profile.Model.Models.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EndMonth");

                    b.Property<string>("EndYear");

                    b.Property<string>("Organization")
                        .HasMaxLength(100);

                    b.Property<string>("Position")
                        .HasMaxLength(100);

                    b.Property<string>("Responsibilities")
                        .HasMaxLength(1000);

                    b.Property<int>("ResumeId");

                    b.Property<string>("StartMonth");

                    b.Property<string>("StartYear");

                    b.Property<bool>("ToPresent");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Profile.Model.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Profile.Model.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Profile.Model.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Profile.Model.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.AdditionalInfo", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume", "Resume")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("Profile.Model.Models.AdditionalInfo", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.Course", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume")
                        .WithMany("Courses")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.Education", b =>
                {
                    b.HasOne("Profile.Model.Models.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Profile.Model.Models.Resume")
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.Exam", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume")
                        .WithMany("Test")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.ForeignLanguage", b =>
                {
                    b.HasOne("Profile.Model.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Profile.Model.Models.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Profile.Model.Models.Resume")
                        .WithMany("Languages")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.MilitaryStatus", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume", "Resume")
                        .WithOne("MilitaryStatus")
                        .HasForeignKey("Profile.Model.Models.MilitaryStatus", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.Portfolio", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume")
                        .WithMany("Portfolio")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.Recommendation", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume")
                        .WithMany("Recommendations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.Resume", b =>
                {
                    b.HasOne("Profile.Model.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.StreamSkill", b =>
                {
                    b.HasOne("Profile.Model.Models.Skill", "Skill")
                        .WithMany("StreamSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Profile.Model.Models.Stream", "Stream")
                        .WithMany("StreamSkills")
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.StudentSkill", b =>
                {
                    b.HasOne("Profile.Model.Models.Skill", "Skill")
                        .WithMany("StudentSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Profile.Model.Models.Student", "Student")
                        .WithMany("StudentSkills")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.StudentStream", b =>
                {
                    b.HasOne("Profile.Model.Models.Stream", "Stream")
                        .WithMany()
                        .HasForeignKey("StreamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Profile.Model.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.Summary", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume", "Resume")
                        .WithOne("Summary")
                        .HasForeignKey("Profile.Model.Models.Summary", "ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.UserInfo", b =>
                {
                    b.HasOne("Profile.Model.Models.ApplicationUser", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("Profile.Model.Models.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Profile.Model.Models.WorkExperience", b =>
                {
                    b.HasOne("Profile.Model.Models.Resume")
                        .WithMany("Experience")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
